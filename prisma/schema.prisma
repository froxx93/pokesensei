// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Quiz {
    id        String     @id @default(uuid())
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    questions Question[]
}

enum QuestionType {
    NAME_OF_POKEMON_BY_IMAGE
    NATURE_BY_STATS
    TYPE_OF_POKEMON
}

model Question {
    id        String       @id @default(uuid())
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt
    Quiz      Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
    quizId    String
    type      QuestionType
    params    Json // dynamic type depending on "type" (see type QuestionWrapper)
    label     Json // type I18nString
    answers   Answer[]
}

model Answer {
    id         String   @id @default(uuid())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId String
    value      String
    isChosen   Boolean  @default(false)
    isCorrect  Boolean?
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
